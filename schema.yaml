db: example

tables:
  User:
    tableId: 1

    fields:
      - name: userName
        type: string
        index:
          unique: true
      - name: passwordHash
        type: ubytes
      - name: created
        index: true
        ## default type is uint64

  Person:
    tableId: 2

    fields:
      - name: fullName
        type: string
      - name: email
        type: string

    indexPrelude: |
      std::string fullNameLC = std::string(v.fullName());
      std::string emailLC = std::string(v.email());
      std::transform(fullNameLC.begin(), fullNameLC.end(), fullNameLC.begin(), ::tolower);
      std::transform(emailLC.begin(), emailLC.end(), emailLC.begin(), ::tolower);

    indices:
      fullNameLC:
        accessor: 'fullNameLC'
      emailLC:
        accessor: 'emailLC'
        unique: true


  Phrase:
    tableId: 3

    fields:
      - name: words
        type: string

    indexPrelude: |
        std::string_view str = v.words();
        std::vector<std::string_view> splitWords;
        size_t start, end = 0;
 
        while ((start = str.find_first_not_of(' ', end)) != std::string::npos) {
            end = str.find(' ', start);
            splitWords.push_back(str.substr(start, end - start));
        }

    indices:
      splitWords:
        multi: true
        accessor: 'splitWords'
