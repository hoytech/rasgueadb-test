db: example

tables:
  User:
    tableId: 1

    fields:
      - name: userName
        type: string
        index:
          unique: true
      - name: passwordHash
        type: ubytes
      - name: created
        index: true
        ## default type is uint64

  Person:
    tableId: 2

    fields:
      - name: fullName
        type: string
      - name: email
        type: string
      - name: age
      - name: role
        type: string

    indexPrelude: |
      fullNameLC = std::string(v.fullName());
      emailLC = std::string(v.email());
      std::transform(fullNameLC->begin(), fullNameLC->end(), fullNameLC->begin(), ::tolower);
      std::transform(emailLC->begin(), emailLC->end(), emailLC->begin(), ::tolower);

      if (v.age() >= 18) age = v.age(); // only index adults
      if (v.role() != "admin") role = v.role(); // don't index admins

    indices:
      fullNameLC: true
      emailLC:
        unique: true
      age:
        integer: true
      role: true


  Phrase:
    tableId: 3

    fields:
      - name: words
        type: string

    indexPrelude: |
        std::string str = std::string(v.words());
        size_t start, end = 0;
 
        while ((start = str.find_first_not_of(' ', end)) != std::string::npos) {
            end = str.find(' ', start);
            splitWords.push_back(str.substr(start, end - start));
        }

    indices:
      splitWords:
        multi: true

  SomeRecord:
    tableId: 4

    primaryKey: altId

    fields:
      - name: altId
      - name: junk
        type: string

  MultiRecs:
    tableId: 5

    fields:
      - name: strs
        type: 'string[]'
        index: true
      - name: ubytesField
        type: 'ubytes[]'
        index: true
      - name: ints
        type: 'uint64[]'
        index: true

  NullIndices:
    tableId: 6

    fields:
      - name: passwordHash
        type: ubytes
        index: true
      - name: created
        index:
          includeZero: true

  AltOrder:
    tableId: 7

    fields:
      - name: desc
        type: string
        index: true
      - name: created

    indices:
      descByCreated:
        altOrder: true

    indexPrelude: |
      descByCreated.push_back({ std::string(v.desc()), v.created() });
